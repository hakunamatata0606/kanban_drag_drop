// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: task_query.sql

package db

import (
	"context"
)

const deleteTask = `-- name: DeleteTask :exec
delete from tasks
where name = ?
`

func (q *Queries) DeleteTask(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteTask, name)
	return err
}

const getStatusId = `-- name: GetStatusId :one
select id
from status
where name = ?
`

func (q *Queries) GetStatusId(ctx context.Context, name string) (int32, error) {
	row := q.db.QueryRowContext(ctx, getStatusId, name)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getTask = `-- name: GetTask :one
select tasks.name as id, tasks.title, tasks.description, status.name as status
from tasks
inner join status on tasks.status_id = status.id
where tasks.name = ?
`

type GetTaskRow struct {
	ID          string `json:"id"`
	Title       string `json:"title"`
	Description string `json:"description"`
	Status      string `json:"status"`
}

func (q *Queries) GetTask(ctx context.Context, name string) (GetTaskRow, error) {
	row := q.db.QueryRowContext(ctx, getTask, name)
	var i GetTaskRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
	)
	return i, err
}

const insertTask = `-- name: InsertTask :exec
insert into tasks(name, title, description, status_id)
values (?, ?, ?, 1)
`

type InsertTaskParams struct {
	Name        string `json:"name"`
	Title       string `json:"title"`
	Description string `json:"description"`
}

func (q *Queries) InsertTask(ctx context.Context, arg InsertTaskParams) error {
	_, err := q.db.ExecContext(ctx, insertTask, arg.Name, arg.Title, arg.Description)
	return err
}

const listStatus = `-- name: ListStatus :many
select id, name
from status
order by id asc
`

func (q *Queries) ListStatus(ctx context.Context) ([]Status, error) {
	rows, err := q.db.QueryContext(ctx, listStatus)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Status
	for rows.Next() {
		var i Status
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTasks = `-- name: ListTasks :many
select tasks.name, tasks.title, tasks.description, status.name as status
from tasks
inner join status on tasks.status_id = status.id
`

type ListTasksRow struct {
	Name        string `json:"name"`
	Title       string `json:"title"`
	Description string `json:"description"`
	Status      string `json:"status"`
}

func (q *Queries) ListTasks(ctx context.Context) ([]ListTasksRow, error) {
	rows, err := q.db.QueryContext(ctx, listTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListTasksRow
	for rows.Next() {
		var i ListTasksRow
		if err := rows.Scan(
			&i.Name,
			&i.Title,
			&i.Description,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTask = `-- name: UpdateTask :exec
update tasks, status
set status_id = status.id
where tasks.name = ? and status.name = ?
`

type UpdateTaskParams struct {
	Name   string `json:"name"`
	Name_2 string `json:"name_2"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) error {
	_, err := q.db.ExecContext(ctx, updateTask, arg.Name, arg.Name_2)
	return err
}

const updateTaskStatus = `-- name: UpdateTaskStatus :exec
update tasks
set status_id = ?
where name = ?
`

type UpdateTaskStatusParams struct {
	StatusID int32  `json:"status_id"`
	Name     string `json:"name"`
}

func (q *Queries) UpdateTaskStatus(ctx context.Context, arg UpdateTaskStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateTaskStatus, arg.StatusID, arg.Name)
	return err
}
